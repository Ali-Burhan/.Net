@model ERP_App.Models.PurchaseReturnCartMV

@{
    ViewBag.Title = "Purchase Return";
}

@using (Html.BeginForm("PurchaseReturnStockProducts", "PurchaseReturn", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(u => u.CompanyID)
    @Html.HiddenFor(u => u.BranchID)
    @Html.HiddenFor(u => u.UserID)
    <div class="row">
        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Purchase Return</div>
                </div>
                <div class="card-body">
                    <div class="form-horizontal">
                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ProductID, "Product", htmlAttributes: new { @class = "control-label" })
                                <div class="">
                                    @Html.DropDownList("ProductID", null, "Select Product", htmlAttributes: new { @class = "form-control", @onchange = "myFunction()" })
                                    @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.PurchaseQuantity, htmlAttributes: new { @class = "control-label " })
                                <div class="">
                                    @Html.EditorFor(model => model.PurchaseQuantity, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PurchaseQuantity, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.PreviousPurchaseUnitPrice, htmlAttributes: new { @class = "control-label " })
                                <div class="">
                                    @Html.EditorFor(model => model.PreviousPurchaseUnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PreviousPurchaseUnitPrice, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.SaleUnitPrice, htmlAttributes: new { @class = "control-label " })
                                <div class="">
                                    @Html.EditorFor(model => model.SaleUnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.SaleUnitPrice, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ManufactureDate, htmlAttributes: new { @class = "control-label " })
                                <div class="">
                                    @Html.EditorFor(model => model.ManufactureDate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ManufactureDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ExpiryDate, htmlAttributes: new { @class = "control-label " })
                                <div class="">
                                    @Html.EditorFor(model => model.ExpiryDate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label " })
                                <div class="">
                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-6">
                                <input type="submit" value="Add Cart" class="btn btn-outline-success" />
                                @Html.ActionLink("Back", "StockProducts", null, new { @class = "btn btn-outline-default" })
                            </div>
                        </div>
                    </div>
                    <hr />
                    <table class="table table-striped my-4 w-100" id="datatable2">
                        <thead>
                            <tr>
                                <th>
                                    Product Name
                                </th>

                                <th>
                                    Purchase Quantity
                                </th>
                                <th>
                                    Manufacture Date
                                </th>
                                <th>
                                    Expiry Date
                                </th>


                                <th>
                                    Previous Purchase Unit Price
                                </th>
                                <th>
                                    Sale Unit Price
                                </th>

                                <th>
                                    Item Cost
                                </th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.SaleItemList)
                            {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ProductName)
                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => item.PurchaseQuantity)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ManufactureDate)
                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => item.ExpiryDate)
                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => item.PreviousPurchaseUnitPrice)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.SaleUnitPrice)
                                </td>

                                <td>
                                    @(item.PurchaseQuantity * item.SaleUnitPrice)
                                </td>
                                <td>
                                    @Html.ActionLink("Delete", "DeletePurchaseReturnCartItem", new { id = item.PurchaseCartReturnDetailID }, new { @class = "btn btn-warning" })

                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-lg-3">
            <div class="card b mb-2">
                <div class="card-header bb">
                    <h4 class="card-title">Return Order Supplier</h4>
                </div>
                <div class="card-body bt">
                    <h4 class="b0">Select Supplier</h4>
                    @Html.DropDownList("SupplierID", null, "Select Supplier", htmlAttributes: new { @class = "form-control", @onchange = "selectSupplier()" })
                    @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
                </div>
                <table class="table">
                    <tbody>
                        <tr>
                            <td>Contact</td>
                            <td>
                                <div class="text-right text-bold"> <label id="suppliercontactno"></label>  </div>
                            </td>
                        </tr>
                        <tr>
                            <td>Address</td>
                            <td>
                                <div class="text-right text-bold"><label id="supplieraddress"></label> </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="card b mb-2">
                <div class="card-header bb">
                    <h4 class="card-title">Return Order Summnary</h4>
                </div>
                <div class="card-body bt">
                </div>
                <table class="table">
                    <tbody>
                        <tr>
                            <td>Subtotal</td>
                            <td>
                                @Html.EditorFor(model => model.OrderSummary.SubTotal, new { htmlAttributes = new { @class = "form-control", @id = "subtotal", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.OrderSummary.SubTotal, "", new { @class = "text-danger" })

                            </td>
                        </tr>
                        <tr>
                            <td>Sale Tax</td>
                            <td>
                                @Html.EditorFor(model => model.OrderSummary.EstimateTax, new { htmlAttributes = new { @class = "form-control", @id = "estimatedtax", @onchange = "CalclaterderTotal()", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.OrderSummary.EstimateTax, "", new { @class = "text-danger" })

                            </td>
                        </tr>
                        <tr>
                            <td>Shiping</td>
                            <td>
                                @Html.EditorFor(model => model.OrderSummary.ShippingFee, new { htmlAttributes = new { @class = "form-control", @id = "shippingfee", @onchange = "CalclaterderTotal()" } })
                                @Html.ValidationMessageFor(model => model.OrderSummary.ShippingFee, "", new { @class = "text-danger" })

                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="card-body">
                    <div class="clearfix">
                        <div class="float-right text-right">
                            <div id="ordertotal">0</div>
                            <div class="text-sm">PKR</div>
                        </div>
                        <div class="float-left text-bold text-dark">RETURN ORDER TOTAL</div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="clearfix">
                        <input type="checkbox" id="ispaymentispaid" />Is Order Payment Is paid?
                    </div>
                </div>
                <div class="card-body">
                    <p>
                        <button class="btn btn-primary btn-block" type="button" onclick="CheckoutPurchase()">CHECKOUT</button>
                    </p>
                    <small class="text-muted">* To use this method you must be registered first</small>
                </div>
            </div>
        </div>
    </div>
}
<script type="text/javascript">
            function myFunction() {
                var productID = $("#ProductID").val();
                $.ajax({
                    type: "GET",
                    url: "/Stock/GetSelectProductDetails?productid=" + productID,
                    data: [],
                    success: function (data) {
                        $("#SaleUnitPrice").val(data.SaleUnitPrice);
                        $("#PreviousPurchaseUnitPrice").val(data.CurrentPurchaseUnitPrice);
                    }
                });
            };
            function selectSupplier() {
                var supplierID = $("#SupplierID").val();
                $.ajax({
                    type: "GET",
                    url: "/Supplier/GetSelectSupplierDetails?id=" + supplierID,
                    data: [],
                    success: function (data) {
                        $("#suppliercontactno").text(data.ContactNo);
                        $("#supplieraddress").text(data.Address);
                    }
                });
                };
                function CheckoutPurchase() {
                    var supplierID = $("#SupplierID").val();
                    var purchase_subtotal = document.getElementById('subtotal').value;
                    var purchase_shippingfee = document.getElementById('shippingfee').value;
                    var purchase_estimatedtax = document.getElementById('estimatedtax').value;
                    var ispaymentispaid = $("#ispaymentispaid").is(':checked');
                $.ajax({
                    type: "GET",
                    url: "/PurchaseReturn/CheckoutPurchase?supplierid=" + supplierID + "&ispaymentispaid=" + ispaymentispaid
                        + "&estimatedtax=" + purchase_estimatedtax + "&shippingfee=" + purchase_shippingfee + "&subtotal=" + purchase_subtotal,
                    data: [],
                    success: function (data) {
                        $("#suppliercontactno").text(data.ContactNo);
                        $("#supplieraddress").text(data.Address);
                    }
                });
                    location.reload();
            };
            function CalclaterderTotal() {
                var purchase_subtotal = document.getElementById('subtotal').value;
                var purchase_shippingfee = document.getElementById('shippingfee').value;
                var purchase_estimatedtax = document.getElementById('estimatedtax').value;
                var purchase_ordertotal = parseFloat(purchase_subtotal) + parseFloat(purchase_shippingfee) + parseFloat(purchase_estimatedtax);
                document.getElementById('ordertotal').innerHTML = purchase_ordertotal;

            };
</script>
