//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataBaseLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CloudERPEntities : DbContext
    {
        public CloudERPEntities()
            : base("name=CloudERPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAccountActivity> tblAccountActivities { get; set; }
        public virtual DbSet<tblAccountControl> tblAccountControls { get; set; }
        public virtual DbSet<tblAccountHead> tblAccountHeads { get; set; }
        public virtual DbSet<tblAccountSetting> tblAccountSettings { get; set; }
        public virtual DbSet<tblAccountSubControl> tblAccountSubControls { get; set; }
        public virtual DbSet<tblBranch> tblBranches { get; set; }
        public virtual DbSet<tblBranchType> tblBranchTypes { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblCity> tblCities { get; set; }
        public virtual DbSet<tblCompany> tblCompanies { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblCustomer> tblCustomers { get; set; }
        public virtual DbSet<tblCustomerPayment> tblCustomerPayments { get; set; }
        public virtual DbSet<tblCustomerReturnPayment> tblCustomerReturnPayments { get; set; }
        public virtual DbSet<tblEmployee> tblEmployees { get; set; }
        public virtual DbSet<tblFinancialYear> tblFinancialYears { get; set; }
        public virtual DbSet<tblPayroll> tblPayrolls { get; set; }
        public virtual DbSet<tblPurchaseCartDetail> tblPurchaseCartDetails { get; set; }
        public virtual DbSet<tblSaleCartDetail> tblSaleCartDetails { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
        public virtual DbSet<tblStock> tblStocks { get; set; }
        public virtual DbSet<tblSupplier> tblSuppliers { get; set; }
        public virtual DbSet<tblSupplierPayment> tblSupplierPayments { get; set; }
        public virtual DbSet<tblTransaction> tblTransactions { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblUserType> tblUserTypes { get; set; }
        public virtual DbSet<tblAgent> tblAgents { get; set; }
        public virtual DbSet<tblProductType> tblProductTypes { get; set; }
        public virtual DbSet<v_Transaction> v_Transaction { get; set; }
        public virtual DbSet<tblPurchaseCartReturnDetail> tblPurchaseCartReturnDetails { get; set; }
        public virtual DbSet<tblSupplierInvoice> tblSupplierInvoices { get; set; }
        public virtual DbSet<tblSupplierReturnInvoice> tblSupplierReturnInvoices { get; set; }
        public virtual DbSet<tblSupplierReturnPayment> tblSupplierReturnPayments { get; set; }
        public virtual DbSet<tblSupplierInvoiceDetail> tblSupplierInvoiceDetails { get; set; }
        public virtual DbSet<tblSupplierReturnInvoiceDetail> tblSupplierReturnInvoiceDetails { get; set; }
        public virtual DbSet<tblSaleCartReturnDetail> tblSaleCartReturnDetails { get; set; }
        public virtual DbSet<tblCustomerInvoice> tblCustomerInvoices { get; set; }
        public virtual DbSet<tblCustomerInvoiceDetail> tblCustomerInvoiceDetails { get; set; }
        public virtual DbSet<tblCustomerReturnInvoice> tblCustomerReturnInvoices { get; set; }
        public virtual DbSet<tblCustomerReturnInvoiceDetail> tblCustomerReturnInvoiceDetails { get; set; }
    
        public virtual ObjectResult<GetSupplierReturnPurchasePaymentPending_Result> GetSupplierReturnPurchasePaymentPending(Nullable<int> supplierInvoiceID)
        {
            var supplierInvoiceIDParameter = supplierInvoiceID.HasValue ?
                new ObjectParameter("SupplierInvoiceID", supplierInvoiceID) :
                new ObjectParameter("SupplierInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierReturnPurchasePaymentPending_Result>("GetSupplierReturnPurchasePaymentPending", supplierInvoiceIDParameter);
        }
    
        public virtual ObjectResult<GetAccountHeadDetials_Result> GetAccountHeadDetials(Nullable<int> headID, Nullable<int> financialYearID, Nullable<int> branchID, Nullable<int> companyID)
        {
            var headIDParameter = headID.HasValue ?
                new ObjectParameter("HeadID", headID) :
                new ObjectParameter("HeadID", typeof(int));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountHeadDetials_Result>("GetAccountHeadDetials", headIDParameter, financialYearIDParameter, branchIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetAccountTotalAmount_Result> GetAccountTotalAmount(string fromDate, string toDate, Nullable<int> headID, Nullable<int> branchID, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var headIDParameter = headID.HasValue ?
                new ObjectParameter("HeadID", headID) :
                new ObjectParameter("HeadID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountTotalAmount_Result>("GetAccountTotalAmount", fromDateParameter, toDateParameter, headIDParameter, branchIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetAllAccounts_Result> GetAllAccounts(Nullable<int> branchID, Nullable<int> companyID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAccounts_Result>("GetAllAccounts", branchIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerPaymentHistory_Result> GetCustomerPaymentHistory(Nullable<int> customerInvoiceID)
        {
            var customerInvoiceIDParameter = customerInvoiceID.HasValue ?
                new ObjectParameter("CustomerInvoiceID", customerInvoiceID) :
                new ObjectParameter("CustomerInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerPaymentHistory_Result>("GetCustomerPaymentHistory", customerInvoiceIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerRemainingPaymentRecord_Result> GetCustomerRemainingPaymentRecord(Nullable<int> branchID, Nullable<int> companyID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerRemainingPaymentRecord_Result>("GetCustomerRemainingPaymentRecord", branchIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerReturnSalePaidPending_Result> GetCustomerReturnSalePaidPending(Nullable<int> customerInvoiceID)
        {
            var customerInvoiceIDParameter = customerInvoiceID.HasValue ?
                new ObjectParameter("CustomerInvoiceID", customerInvoiceID) :
                new ObjectParameter("CustomerInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerReturnSalePaidPending_Result>("GetCustomerReturnSalePaidPending", customerInvoiceIDParameter);
        }
    
        public virtual ObjectResult<GETDashboardValues_Result> GETDashboardValues(Nullable<int> branchID, Nullable<int> companyID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETDashboardValues_Result>("GETDashboardValues", branchIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetJournal_Result> GetJournal(Nullable<int> branchID, Nullable<int> companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJournal_Result>("GetJournal", branchIDParameter, companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetLedger_Result> GetLedger(Nullable<int> branchID, Nullable<int> companyID, Nullable<int> financialYearID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLedger_Result>("GetLedger", branchIDParameter, companyIDParameter, financialYearIDParameter);
        }
    
        public virtual ObjectResult<GetPurchasesHistory_Result> GetPurchasesHistory(Nullable<int> branchID, Nullable<int> companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchasesHistory_Result>("GetPurchasesHistory", branchIDParameter, companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetReturnPurchasePaymentPending_Result> GetReturnPurchasePaymentPending(Nullable<int> branchID, Nullable<int> companyID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReturnPurchasePaymentPending_Result>("GetReturnPurchasePaymentPending", branchIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetReturnSaleAmountPending_Result> GetReturnSaleAmountPending(Nullable<int> branchID, Nullable<int> companyID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReturnSaleAmountPending_Result>("GetReturnSaleAmountPending", branchIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetSalesHistory_Result> GetSalesHistory(Nullable<int> branchID, Nullable<int> companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesHistory_Result>("GetSalesHistory", branchIDParameter, companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetSupplierPaymentHistory_Result> GetSupplierPaymentHistory(Nullable<int> supplierInvoiceID)
        {
            var supplierInvoiceIDParameter = supplierInvoiceID.HasValue ?
                new ObjectParameter("SupplierInvoiceID", supplierInvoiceID) :
                new ObjectParameter("SupplierInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierPaymentHistory_Result>("GetSupplierPaymentHistory", supplierInvoiceIDParameter);
        }
    
        public virtual ObjectResult<GetSupplierRemainingPaymentRecord_Result> GetSupplierRemainingPaymentRecord(Nullable<int> branchID, Nullable<int> companyID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierRemainingPaymentRecord_Result>("GetSupplierRemainingPaymentRecord", branchIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> GETTotalBYHeadAccount(Nullable<int> headID, Nullable<int> financialYearID, Nullable<int> branchID, Nullable<int> companyID)
        {
            var headIDParameter = headID.HasValue ?
                new ObjectParameter("HeadID", headID) :
                new ObjectParameter("HeadID", typeof(int));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("GETTotalBYHeadAccount", headIDParameter, financialYearIDParameter, branchIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetTrialBalance_Result> GetTrialBalance(Nullable<int> branchID, Nullable<int> companyID, Nullable<int> financialYearID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrialBalance_Result>("GetTrialBalance", branchIDParameter, companyIDParameter, financialYearIDParameter);
        }
    }
}
